# 스프링 MVC 1편
## HTTP
웹상에서 리소스들(html, text, image, 음성, 영상, 파일, json, xml...)을 가져올 수 있도록 해주는 프로토콜


## Web Server
정적 리소스 제공

## WAS (Web Application Server)
다양한 로직을 처리하는 동적인 컨텐츠 제공 (물론 정적 리소스 제공도 가능)
### 서블릿
HTTP 요청과 응답의 흐름을 간단한 메서드 호출만으로 체계적으로 다룰 수 있게 해주는 기술
```java
@WebServlet(name = "helloServlet", urlPatterns = "/hello") 
public class HelloServlet extends HttpServlet { 
 @Override 
 protected void service(HttpServletRequest request, HttpServletResponse response){ 
 //애플리케이션 로직
 } 
}
```

### 서블릿 컨테이너
- 톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함
- 서블릿 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기 관리
- 서블릿 객체는 싱글톤으로 관리
- 동시 요청을 위한 멀티 쓰레드 처리 지원

### 쓰레드 풀
WAS에서 HTTP 요청마다 쓰레드를 생성하여 서블릿을 이용하는 방식의 단점을 보완
![image](https://user-images.githubusercontent.com/25169200/218711963-c1778c38-6fec-48be-acf7-3dac264d1c3f.png)


## SSR(서버 사이드 렌더링), CSR(클라이언트 사이드 렌더링)
### SSR
- HTML 최종 결과를 서버에서 만들어서 웹 브라우저에 전달
- 주로 정적인 화면에 사용
- 관련기술: JSP, 타임리프

### CSR
- HTML 결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용
- 주로 동적인 화면에 사용
- 관련기술: React, Vue.js


## 서블릿 - HttpServletRequest
### 쿼리 파라미터 
```java
@WebServlet(name = "requestParamServlet", urlPatterns = "/request-param")
public class RequestParamServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException {
        System.out.println("[전체 파라미터 조회] - start");
        request.getParameterNames().asIterator()
                .forEachRemaining(paramName -> System.out.println(paramName +
                        "=" + request.getParameter(paramName)));
        System.out.println("[전체 파라미터 조회] - end");
        System.out.println();
        System.out.println("[단일 파라미터 조회]");
        String username = request.getParameter("username");
        System.out.println("request.getParameter(username) = " + username);
        String age = request.getParameter("age");
        System.out.println("request.getParameter(age) = " + age);
        System.out.println();
        System.out.println("[이름이 같은 복수 파라미터 조회]");
        System.out.println("request.getParameterValues(username)");
        String[] usernames = request.getParameterValues("username");
        for (String name : usernames) {
            System.out.println("username=" + name);
        }
        resp.getWriter().write("ok");
    }
}
```

### HTML form 데이터 요청
```java
@WebServlet(name = "requestBodyStringServlet", urlPatterns = "/request-bodystring")
public class RequestBodyStringServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream,
                StandardCharsets.UTF_8);
        System.out.println("messageBody = " + messageBody);
        response.getWriter().write("ok");
    }
}
```


### API메시지(JSON) 요청
```java
@WebServlet(name = "requestBodyJsonServlet", urlPatterns = "/request-bodyjson")
public class RequestBodyJsonServlet extends HttpServlet {
    private ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        ServletInputStream inputStream = request.getInputStream();
        String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
        System.out.println("messageBody = " + messageBody);
        HelloData helloData = objectMapper.readValue(messageBody,
                HelloData.class);
        System.out.println("helloData.username = " + helloData.getUsername());
        System.out.println("helloData.age = " + helloData.getAge());
        response.getWriter().write("ok");
    }
}
```
- JSON 결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다. 스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리( ObjectMapper )를 함께 제공한다.


## 서블릿 - HttpServletResponse
### HTML 응답
```java
@WebServlet(name = "responseHtmlServlet", urlPatterns = "/response-html")
public class ResponseHtmlServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //Content-Type: text/html;charset=utf-8
        response.setContentType("text/html");
        response.setCharacterEncoding("utf-8");
        PrintWriter writer = response.getWriter();
        writer.println("<html>");
        writer.println("<body>");
        writer.println(" <div>안녕?</div>");
        writer.println("</body>");
        writer.println("</html>");
    }
}
```

### API메시지(JSON) 응답
```java
@WebServlet(name = "responseJsonServlet", urlPatterns = "/response-json")
public class ResponseJsonServlet extends HttpServlet {
    private ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //Content-Type: application/json
        response.setHeader("content-type", "application/json");
        response.setCharacterEncoding("utf-8");
        HelloData data = new HelloData();
        data.setUsername("kim");
        data.setAge(20); //{"username":"kim","age":20}
        String result = objectMapper.writeValueAsString(data);
        response.getWriter().write(result);
    }
}
```


## MVC 패턴 (Model View Controller)
서블릿만으로 개발할 때는 뷰(View)화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 지저분하고 복잡했다. JSP를 사용한 덕분에 뷰를 생성하는 HTML 작업을 깔끔하게 가져가고, 중간중간 동적으로 변경이 필요한 부분에만 자바 코드를 적용했다. 그런데 이렇게 해도 해결되지 않는 몇가지 고민이 남는다. 비즈니스 로직과 뷰 영역을 모두 JSP에 작성하다 보니 JSP가 너무 많은 역할을 하여 코드의 유지보수성이 떨어진다. 때문에 비즈니스 로직은 서블릿 처럼 다른곳에서 처리하고, JSP는 목적에 맞게 HTML로 화면(View)을 그리는 일에 집중하도록 하기 위해 MVC 패턴이 등장하였다.
- 컨트롤러: HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다. (컨트롤러에 비즈니스 로직을 둘 수도 있지만, 이렇게 되면 컨트롤러가 너무 많은 역할을 담당한다. 그래서 일반적으로 비즈니스 로직은 서비스(Service)라는 계층을 별도로 만들어서 처리한다. )
- 모델: 뷰에 출력할 데이터를 담아둔다. 뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.
- 뷰: 모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.
![image](https://user-images.githubusercontent.com/25169200/218720839-2a9d6975-dd35-43dd-84dc-d34c7f2ee966.png)
### 단점과 해결방법
MVC 패턴을 적용한 덕분에 컨트롤러의 역할과 뷰를 렌더링 하는 역할을 명확하게 구분할 수 있다. 그런데 컨트롤러 코드에 딱 봐도 중복이 많고, 필요하지 않는 부분이 많이 보인다. 이런 중복 부분들 때문에 공통처리가 어렵다. 기능이 복잡해질 수 록 컨트롤러에서 공통으로 처리해야 하는 부분이 점점 더 많이 증가할 것이다.이 문제를 해결하려면 컨트롤러 호출 전에 먼저 공통 기능을 처리해야 한다. 소위 수문장 역할을 하는 기능이 필요하다. 프론트 컨트롤러(Front Controller) 패턴을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.


## Front Controller 패턴
도입 전

![image](https://user-images.githubusercontent.com/25169200/218727241-c8e54824-6e15-4b7c-9e70-61b2928b0d4c.png)

도입 후

![image](https://user-images.githubusercontent.com/25169200/218727403-119ddcc1-6572-42f8-8b23-80a671d62363.png)

- 스프링 웹 MVC의 핵심도 바로 FrontController, 스프링 웹 MVC의 DispatcherServlet이 FrontController 패턴으로 구현되어 있음

### FrontController의 단계적 리팩토링
버전1

![image](https://user-images.githubusercontent.com/25169200/218727828-b778f525-ecab-47e2-bece-c29c7fc7df7c.png)

버전2 - View 분리, 중복 코드 제거

![image](https://user-images.githubusercontent.com/25169200/218728074-88b6af0b-90bc-4984-b26e-486514525193.png)

버전3 - Model 도입, 중복 매개변수 제거

![image](https://user-images.githubusercontent.com/25169200/218728311-3b52d264-9d3f-492c-822b-9387ebc536b0.png)

버전 4 - 실용성 보완

![image](https://user-images.githubusercontent.com/25169200/218728448-2539a51a-104a-43d1-8c91-8359e2c15c5d.png)

버전 5 - 다양한 핸들러(컨트롤러) 인터페이스를 이용하는 유연한 코드를 위해 어댑터 도입

![image](https://user-images.githubusercontent.com/25169200/218729056-efe7d8d3-d2ae-49fc-bb9f-358142e16334.png)

- 스프링MVC는 여기서 애노테이션을 지원하는 어댑터까지 이용하여 더 편리하게 발전시켰다.
